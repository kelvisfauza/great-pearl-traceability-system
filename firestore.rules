rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user employee record
    function getUserEmployee() {
      return get(/databases/$(database)/documents/employees/$(resource.id)).data;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/employee_index/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.role == 'Administrator';
    }
    
    // Helper function to check if user has HR permissions
    function isHRPersonnel() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/employee_index/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.permissions.hasAny(['Human Resources', 'HR Management']) ||
              get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.role in ['Administrator', 'Manager']);
    }
    
    // Helper function to check if user can manage employees
    function canManageEmployees() {
      return isAdmin() || isHRPersonnel();
    }
    
    // Helper function to check if accessing own record
    function isOwnRecord() {
      return isAuthenticated() && 
             resource.data.authUserId == request.auth.uid;
    }
    
    // Employees collection - SECURE ACCESS ONLY
    match /employees/{employeeId} {
      // Read access: Only admins, HR personnel, or user accessing their own basic info
      allow read: if isAdmin() || 
                     isHRPersonnel() || 
                     (isAuthenticated() && resource.data.authUserId == request.auth.uid);
      
      // Create access: Only admins and HR personnel
      allow create: if canManageEmployees() &&
                       // Validate required fields
                       resource.data.name is string &&
                       resource.data.email is string &&
                       resource.data.position is string &&
                       resource.data.department is string &&
                       resource.data.role is string &&
                       // Only admins can create admin accounts
                       (resource.data.role != 'Administrator' || isAdmin());
      
      // Update access: Only admins and HR personnel, or user updating their own limited fields
      allow update: if canManageEmployees() ||
                       (isAuthenticated() && 
                        resource.data.authUserId == request.auth.uid &&
                        // Users can only update limited fields on their own record
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['phone', 'address', 'emergency_contact', 'avatar_url', 'updated_at']));
      
      // Delete access: Only administrators
      allow delete: if isAdmin();
    }
    
    // Security audit log - Write access for system, read access for admins only
    match /security_audit_log/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // System can log events
      allow update, delete: if false; // Audit logs should never be modified
    }
    
    // Role assignments collection (if it exists)
    match /role_assignments/{assignmentId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications collection - Department/role-scoped access
    function userHasEmployeeDoc() {
      return isAuthenticated() && exists(/databases/$(database)/documents/employee_index/$(request.auth.uid));
    }
    function userDept() {
      return get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.department;
    }
    function userRole() {
      return get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.role;
    }
    function canViewNotification() {
      return isAdmin() || (
        userHasEmployeeDoc() && (
          (resource.data.targetRole != null && resource.data.targetRole == userRole()) ||
          (resource.data.targetDepartment != null && resource.data.targetDepartment == userDept()) ||
          (resource.data.type == 'announcement' && resource.data.department == userDept()) ||
          (resource.data.type == 'system' && resource.data.targetRole == null && resource.data.targetDepartment == null)
        )
      );
    }

    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && canViewNotification();

      // Departmental users can create announcements for their own department; admins can create any
      allow create: if isAuthenticated() && (
        isAdmin() || (
          userHasEmployeeDoc() &&
          request.resource.data.type == 'announcement' &&
          request.resource.data.department == userDept()
        )
      );

      // Only allow recipients to mark as read; restrict updated fields
      allow update: if isAuthenticated() && (
        isAdmin() || (
          canViewNotification() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['isRead','readAt'])
        )
      );

      allow delete: if isAdmin();
    }

    // Presence tracking - users can write their own presence, authenticated users can read
    match /presence/{uid} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.auth.uid == uid;
      allow delete: if false;
    }

    // Employee index - users can upsert their own index document
    match /employee_index/{uid} {
      allow read: if isAuthenticated() && request.auth.uid == uid || isAdmin();
      allow create, update: if isAuthenticated() && request.auth.uid == uid;
      allow delete: if false;
    }

    // Security alerts - visible and manageable by Admins and IT Management
    function hasPermission(perm) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/employee_index/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/employee_index/$(request.auth.uid)).data.permissions.hasAny([perm]);
    }

    match /security_alerts/{alertId} {
      allow read: if isAuthenticated() && (isAdmin() || hasPermission('IT Management'));
      allow create: if isAuthenticated() && (isAdmin() || hasPermission('IT Management'));
      allow update: if isAuthenticated() && (isAdmin() || hasPermission('IT Management'));
      allow delete: if false;
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}